package com.example.clean_code.chap8;

/*
	# 경계

	1. 외부 코드 사용하기
		- Map 같은 인스턴스를 여기저기 넘긴다면, Map 인터페이스가 변하면 수정할 코드가 많아지고,
		  사용자가 마음만 먹으면 마음대로 조작할 수 있다.
	    - Map 과 같은 인터페이스 사용 시 여기저기 넘기지 말고 이를 이용하는 클래스 밖으로 노출하지 않도록 주의하자.

	2. 경계 살피고 익히기
		- 외부 코드 사용 시 적은 시간에 더 많은 기능 출시가 쉬워진다.
		- 외부 코드는 익히기 어렵고 통합 하기도 어렵다.
		- 외부 코드 사용 전 간단한 테스트 케이스를 작성해 익히면 좋다. + 문서 + 구글링 등 (학습 테스트)
		- 충분히 익혔다면 독자적인 클래스로 캡슐화하여 사용한다.

	3. 학습 테스트는 공짜 이상이다.
		- 이해도를 높여주는 정확한 실험
		- 투자하는 노력보다 성과가 크다.
		- 버전이 업데이트 되어도 테스트를 돌려 문제를 확인할 수 있다.
			- 새 버전으로 이전하기 쉬워진다.

	4. 아직 존재하지 않는 코드 사용하기
		- 구현을 미루고, 필요한 인터페이스를 자체적으로 정의
			- 전적으로 인터페이스 통제 가능
			- 분명한 의도 표현과 가독성 증가
			- 편리한 테스트 (fake class 활용 가능)

	5. 깨끗한 경계
		- 설계가 우수하다면 변경하는데 많은 투자와 재작업이 필요하지 않다.
		- 경계에 위치한 코드는 깔끔히 분리한다.
		- 통제가 불가능한 외부코드가 아닌 통제 가능한 우리코드에 의존하는 편이 훨씬 좋다.
			- 새로운 클래스로 감싸거나, 어뎁터 패턴을 사용해 우리가 원하는 인터페이스를 변환
 */
public class Chap8 {
}
