package com.example.clean_code.chap9;

/*
	# 단위 테스트

	1. 깨끗한 테스트 코드 유지하기
		 - 깨끗하지 않은 테스트는 오히려 시간과 비용을 잡아먹는다.
		 - 테스트 코드는 실제 코드 못지 않게 중요하다.
		 - 테스트는 유연성, 유지보수성, 재사용성을 제공한다.
		 	- 테스트 케이스가 있으면 변경이 쉬워진다.
		 - 테스트 케이스가 없다면 모든 변경은 잠정적인 버그다.
		 - 테스트 커버리지가 높을수록 버그에 대한 공포가 사라진다.
		 - 가독성은 굉장히 중요하다.
		 	- 의도를 흐리는 코드는 읽는 사람을 힘들게 한다.
		 	- 의도를 흐리는 코드들을 따로 함수나 유틸리티 클래스로 분리하자.

	2. assert
		- assert 문을 최대한 줄이는 고민을 해보자.
		- 많이 넣는다고 문제가 되는 건 아니다.
		- assert 문을 줄일 수록 함수의 결론이 하나로 도출되지만, 중복이 많아질 수 있다.

	3. 테스트 당 개념 하나.
		- 테스트 함수마다 한 개념만 테스트 하는게 좋다.
			- 여러 개념을 한 함수로 몰아 넣으면 독자는 존재 이유와 코드를 모두 이해해야 한다.

	4. F I R S T
		- Fast
			- 테스트는 빨라야 한다.
				- 자주 돌려야 하기 때문에
		- Independent
			- 각 테스트는 서로 의존하면 안된다.
		- Repeatable
			- 테스트는 어떤 환경에서도 반복 가능해야 한다.
		- Self-validating
			- 테스트는 boolean 값으로 결과를 내야 한다. (성공 or 실패)
		- Timely
			- 테스트는 적시에 작성해야 한다.
				- 단위 테스트는 실제 코드 구현하기 직전 or 직후에 작성한다.

	- 테스트 코드는 지속적으로 깨끗하게 관리하자!
	- DSL을 활용하면 좋다. (도메인 전용 언어 (Domain-Specific Language))
 */
public class Chap9 {
}
