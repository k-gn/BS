package com.example.clean_code.chap5;

/*
	# 형식 맞추기 (가독성)
		- 코드 형식은 매우 중요하다.
		- 형식을 맞추는 목적
			- 코드 형식은 의사소통의 일환
			- 유지보수 용이성과 확장성

		1. 적당한 행 길이 유지
			- 신문 기사처럼 작성
				- 이름만 보고도 올바른 모듈을 살피고 있는지 판단 가능
				- 아래로 내려갈수록(저차원) 의도를 세세히 묘사
			- 개념은 빈 행으로 분리
				- 빈 행은 새로운 개념을 시작한다는 시각적 단서
				- 분명하게 확인이 가능해진다.
			- 세로 밀집도
				- 줄바꿈이 개념 분리라면 세로 밀집도는 연관성을 의미
				- 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다.
				- 코드가 한눈에 들어올 수 있다.
			- 수직거리
				- 서로 밀접한 개념은 세로로 가까이 두어야 한다.
				- 타당한 근거가 없다면 서로 밀접한 개념은 한 파일에 속해야 한다.
				- 여기저기 뒤지게 되는 행위는 시간과 노력을 소모한다.
				- 변수는 사용하는 위치에 최대한 가까이 선언한다.
				- 인스턴스 변수는 클래스 맨 처음에 선언한다.
				- 종속함수 : 한 함수가 다른 함수를 호출하면 두 함수는 세로로 가까이 배치한다.
					- 호출하는 함수를 호출되는 함수보다 먼저 배치한다.
				- 개념적 유사성 : 친화도가 높을수록 코드를 가까이 배치한다. (ex. 비슷한 동작)
			- 세로 순서
				- 중요한 개념을 먼저 표현
				- 중요한 개념을 표현할 땐 세세한 사항을 최대한 배제
				- 세세한 사항은 마지막에 표현

		2. 가로 형식 맞추기
			- 짧은 행이 바람직하다.
			- 가로 공백과 밀집도
				- 공백을 사용해 밀접한 개념과 느슨한 개념을 표현
				- ex. 연산자나 수식 강조, 함수 이름과 이어지는 괄호, 인수 사이
			- 들여쓰기
				- 범위로 이뤄진 계층을 표현
				- 코드가 속하는 범위를 시각적으로 표현
				- 구조가 한눈에 들어와 이해하기 쉽게 해준다.
			- 가짜 범위
				- 빈 블록은 가능한 피하자
				- 피하지 못할 경우 올바르게 들여쓰고 괄호로 감싼다.

		3. 팀 규칙
			- 팀에 속한다면 팀 규칙에 따라야 한다.
				- 그래야 일관적인 스타일을 보여준다.

		- 좋은 소프트웨어 시스템은 읽기 쉬운 문서로 이뤄진다.
		- 스타일은 항상 일관적이고 매끄러워야 한다.
			- 한 소스 파일에서 본 형식이 다른 소스 파일에도 쓰이리라는 신뢰감을 줘야 한다.
			- 온갖 스티일이 뒤섞이는 실수는 반드시 피하자.
 */
public class Chap5 {
	
}
