package com.example.clean_code.chap11;

/*
	# 시스템

	1. 시스템 제작과 사용의 분리 (관심사 분리)
		- 설정 논리는 일반 실행 논리와 분리되어야 모듈성이 높아진다.
		- 메인 모듈에서 생성과 관련된 코드를 작업
		- 생성 시점을 애플리케이션이 결정해야 한다면 팩토리 패턴 활용
		- 사용과 제작 분리의 강력한 매커니즘 : 의존성 주입 (DI)
		- 횡단 관심사, AOP

	# 창발성

	- 우수한 설계가 나오는 간단한 규칙
	1. 모든 테스트를 실행하라
		- 결합도가 높으면 테스트 코드 작성이 힘들다.
		- 철저히 테스트 가능한 시스템을 만들면 더 나은 설계를 얻는다.
	2. 리팩터링
		- 테스트가 있으니 걱정할 필요 없이 코드 정리가 가능하다.
			- 중복 제거
				- 단 몇줄이라도 중복을 제거하겠다는 의지가 필요하다.
				- 템플릿 메서드 패턴으로 고차원 중복 제거 가능
				- 소규모 재사용은 시스템 복잡도를 줄여준다.
			- 의도 표현
				- 코드는 개발자의 의도를 분명히 표현해야 한다.
				- 좋은 이름 선택하기
				- 함수와 클래스 크기를 줄이기
				- 표준 명칭 사용하기
				- 단위 테스트 작성하기
				- 많은 노력과 주의가 필요하다.
			- 클래스, 메서드를 가능한 최소화
				- 무의미하고 독단적인 정책으로 클래스와 메서드 수를 늘리지 말 것
					- ex. 클래스마다 무조건 인터페이스를 생성하라는 것
				- 실용적인 방식을 택한다.
 */
public class Chap11 {
}
