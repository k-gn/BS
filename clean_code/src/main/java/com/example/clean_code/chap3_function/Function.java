package com.example.clean_code.chap3_function;

/*
	# 함수

	1. 작게 만들어라
		- 가능한 3~4줄 정도
		- 블록 안은 가능한 1줄
		- 들여쓰기 가능한 1단

	2. 한가지만 해라
		- 추상화 수준이 하나인 단계
		- 함수 내에서 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 함수다.

	3. 함수 당 추상화 수준은 하나로
		- 위에서 아래로 이야기처럼 읽히는 게 좋다.

	4. Switch 문
		- Switch 은 작게 만들기 어렵다.
			- 저차원 클래스에 숨기고 절대 반복하지 않는 방법은 있다. (다형성)

	5. 서술적인 이름 사용
		- 함수가 하는 일을 잘 표현하자.
		- 모듈 내 함수 이름은 일관성이 있어야 한다.
			- 같은 문구, 명사, 동사 사용

	6. 함수 인수
		- 가장 이상적인 인수는 0개
		- 특별한 이유가 있다는 가정하에 가능한 최대 4개
		- 인수가 많을수록 읽는 사람 입장에서 이해하기 어렵다.
			- 인수가 어떻게 쓰이는지 이해하는 비용이 든다. (매번 함수를 볼 때마다 주춤하는지)
		- 테스트 관점에서도 인수가 많을수록 검증하기 어렵다.
		- 단항 함수
			- 인수에 질문을 던지거나, 인수를 변환해 결과를 반환하는 경우에 사용
			- 이벤트 함수에서도
				- 이벤트 함수같은 경우 이벤트라는 사실을 이름과 문맥으로 명확히 드러내야 한다.
			- 입력 인수를 변환하는 함수라면 결과를 반환해주는 변환함수 형식 지향. (void 지양)
		- 플래그 인수는 쓰지말자
		- 이항 함수
			- 인수가 1개인 함수보다 이해하기 어렵다.
			- 한 값을 표현하거나, 자연적인 순서라면 적절하다.
			- 불가피한 경우가 생기지만 위험이 따른다.
			- 클래스 멤버로 만들거나, 새 클래스를 만들거나 등으로 인자를 줄일 수 있다.
		- 삼항함수
			- 매우 신중히 고려하고 만들어야 한다.
		- 인수 객체
			- 인수가 여러개 필요하다면 클래스 변수로 선언할 가능성을 짚어본다.
			- 개념을 표현
		- 인수 목록
			- 인수 개수가 가변적인 함수도 필요하다.
				- List 형 인수 하나로 취급할 수 있다.
		- 동사와 키워드
			- 함수의 의도나 인수의 순서 및 의도를 제대로 표현하려면 좋은 함수 이름이 필수다.
			- 함수와 인수가 동사/명사 쌍을 이뤄야 한다.
			- 함수 이름에 인수 이름을 넣는 키워드 추가 형식도 좋다.

	7. 부수 효과를 일으키지 마라
		- 예상치 못한 일은 무엇이든 좋지 않다.
		- 사용하는 입장에서 모르고 사용할 수 있어 위험하다.
		- 부수효과가 있는 함수는 특정 상황에서만 호출이 가능하다.
		- 출력 인수
			- 일반적으로 출력 인수는 피해야 한다.
			- 함수 선언부를 찾아보고 나서야 출력 인수인지 아닌지 이해할 수 있게 된다.
			- 츨력 인수 : Parameter를 Output으로 사용하는 형태
			- 함수에서 상태를 변경해야 한다면 함수가 속한 객체 상태를 변경하는 방식을 택한다.

	8. 명령과 조회를 분리하라
		- 함수는 뭔가를 수행하거나, 답하거나 둘중 하나만 해야한다.
		- 둘다 하면 혼란을 초래할 수 있다.

	9. 오류 코드 보다는 예외를 사용해라
		- 오류 코드를 반환하면 즉시 처리해야 한다는 문제가 있다.
		- 예외를 사용하면 오류 코드가 원래 코드에서 분리되어 깔끔해진다.
		- try/catch
			- 코드 구조 혼란을 일으키고, 동작을 뒤섞는다.
			- 별도 함수로 뽑아내는 편이 좋다.
		- 오류 처리도 한가지 작업에 속한다.
		- 오류 코드만 사용하면 다른 모든 클래스에서 Error Enum 에 의존할 것이다.
			- 추가 / 변경이 일어나면 전부 수정해주어야 하는 불편함이 있다.
		- 예외는 Exceptino 클래스에서 파생된다.
			- 새 예외 클래스를 그냥 생성하여 추가하면 된다.

	10. 반복하지 마라
		- 중복은 문제다.
			- 다른 코드와 섞이면 모양새가 조금씩 달라져 금방 드러나지도 않는다.
			- 코드 길이가 늘어나고, 변하면 전부 수정해야 한다.
			- 한곳이라도 빠뜨리면 오류가 발생할 수 있다.

	11. 구조적 프로그래밍
		- 함수가 매우 큰 경우에 이익을 제공한다.
			- 함수에 return 은 하나이며, break, continue를 쓰지 않는다.
		- 작은 함수라면 해당하지 않는 내용이다.

	12 어떻게 함수를 짤까?
		- 처음 이다.함수를 짤 땐 당연히 길고 복잡하고 중복도 있고 서투른 코드일 것
		- 그리고 이러한 코드를 테스트하는 단위테스트 코드를 만든다.
		- 그 이후에 코드를 다듬고, 함수를 만들고, 이름을 바꾸고, 중복을 제거하는 등 리펙토링을 한다.
		- 이 때 단위테스트는 계속 통과해야한다.

	# 시스템이라는 이야기를 풀어가는 게 진짜 목표다.
		- 시스템에서 발생하는 모든 동작을 설명하는 함수 계층이 언어에 속한다.
		- 작성하는 함수가 분명하고 정환한 언어로 깔끔하게 떨어져야 이야기를 풀어가기 쉬워진다.
 */
public class Function {

	public static void main(String[] args) {

	}
}
